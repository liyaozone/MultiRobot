// Generated by gencpp from file follwer_pkg/sensor_msg.msg
// DO NOT EDIT!


#ifndef FOLLWER_PKG_MESSAGE_SENSOR_MSG_H
#define FOLLWER_PKG_MESSAGE_SENSOR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace follwer_pkg
{
template <class ContainerAllocator>
struct sensor_msg_
{
  typedef sensor_msg_<ContainerAllocator> Type;

  sensor_msg_()
    : leftSensor()
    , rightSensor()
    , middleSensor()  {
    }
  sensor_msg_(const ContainerAllocator& _alloc)
    : leftSensor(_alloc)
    , rightSensor(_alloc)
    , middleSensor(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _leftSensor_type;
  _leftSensor_type leftSensor;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rightSensor_type;
  _rightSensor_type rightSensor;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _middleSensor_type;
  _middleSensor_type middleSensor;





  typedef boost::shared_ptr< ::follwer_pkg::sensor_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::follwer_pkg::sensor_msg_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_msg_

typedef ::follwer_pkg::sensor_msg_<std::allocator<void> > sensor_msg;

typedef boost::shared_ptr< ::follwer_pkg::sensor_msg > sensor_msgPtr;
typedef boost::shared_ptr< ::follwer_pkg::sensor_msg const> sensor_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::follwer_pkg::sensor_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::follwer_pkg::sensor_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace follwer_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'follwer_pkg': ['/home/vrep/MultiRobot/ros_workspace/followROS/src/follwer_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::follwer_pkg::sensor_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::follwer_pkg::sensor_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::follwer_pkg::sensor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::follwer_pkg::sensor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::follwer_pkg::sensor_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::follwer_pkg::sensor_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::follwer_pkg::sensor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c64c0bbfafe9bd0d7b532b4815be2a0d";
  }

  static const char* value(const ::follwer_pkg::sensor_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc64c0bbfafe9bd0dULL;
  static const uint64_t static_value2 = 0x7b532b4815be2a0dULL;
};

template<class ContainerAllocator>
struct DataType< ::follwer_pkg::sensor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "follwer_pkg/sensor_msg";
  }

  static const char* value(const ::follwer_pkg::sensor_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::follwer_pkg::sensor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] leftSensor\n"
"float32[] rightSensor\n"
"float32[] middleSensor\n"
;
  }

  static const char* value(const ::follwer_pkg::sensor_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::follwer_pkg::sensor_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftSensor);
      stream.next(m.rightSensor);
      stream.next(m.middleSensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::follwer_pkg::sensor_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::follwer_pkg::sensor_msg_<ContainerAllocator>& v)
  {
    s << indent << "leftSensor[]" << std::endl;
    for (size_t i = 0; i < v.leftSensor.size(); ++i)
    {
      s << indent << "  leftSensor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.leftSensor[i]);
    }
    s << indent << "rightSensor[]" << std::endl;
    for (size_t i = 0; i < v.rightSensor.size(); ++i)
    {
      s << indent << "  rightSensor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rightSensor[i]);
    }
    s << indent << "middleSensor[]" << std::endl;
    for (size_t i = 0; i < v.middleSensor.size(); ++i)
    {
      s << indent << "  middleSensor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.middleSensor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOLLWER_PKG_MESSAGE_SENSOR_MSG_H
